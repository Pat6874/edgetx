//
// WARNING: DO NOT EDIT THIS FILE
//   This file has been generated from the target's JSON hardware description
//

static const stm32_adc_input_t _ADC_inputs[] = {
{% for input in adc_inputs.inputs %}
  {
    "{{ input.name }}",
    ADC_INPUT_{{ input.type }},
    {{ input.gpio if input.gpio else 'nullptr' }},
    {{ input.pin if input.gpio else '0' }},
    {{ input.channel }},
    {{ '1 // inverted' if input.inverted else '0 // normal' }}
  },
{% endfor %}
};

{% for adc in adc_inputs.adcs %}
{% set inputs = adc_inputs.inputs | selectattr('adc', '==', adc.name) %}
static const uint8_t _ADC_{{ adc.name }}_channels[] = {
  {% for input in inputs %}
    {{ adc_index[input.name] }},
  {% endfor %}
};

{% endfor %}
static const stm32_adc_t _ADC_adc[] = {
{% set ns = namespace(start_offs=0) %}
{% for adc in adc_inputs.adcs %}
  {% set inputs = adc_inputs.inputs | selectattr('adc', '==', adc.name) %}
  {% set input_count = inputs | list | count %}
  { {{ adc.adc }}, nullptr, 0, 0, // TODO: DMA settings
    _ADC_{{ adc.name }}_channels, {{ input_count }}, 0/*sample_time*/ },
  {% set ns.start_offs = ns.start_offs + input_count %}
{% endfor %}
};

{% for adc_gpio, adc_inputs in adc_gpios.items() | sort %}
static const uint32_t _ADC_{{ adc_gpio }}_pins[] = {
  {% for input in adc_inputs %}
    {{ input.idx }},
  {% endfor %}
};

{% endfor %}
static const stm32_adc_gpio_t _ADC_GPIOs[] = {
{% for adc_gpio, adc_inputs in adc_gpios.items() | sort %}
  { {{ adc_gpio }}, _ADC_{{ adc_gpio }}_pins, {{ adc_inputs|count }} },
{% endfor %}
};
